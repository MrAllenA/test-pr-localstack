name: PR Preview - FastAPI + Localstack

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

permissions:
  pull-requests: write

jobs:
  pr-review:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3. Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Start Docker Compose (Localstack + Postgres)
      - name: Start Docker Compose
        run: |
          docker compose up -d
          sleep 20  # wait for services to start
      - name: Wait for Localstack
        run: |
          echo "⏳ Waiting for Localstack to be ready..."
          until curl -s http://localhost:4566/_localstack/health | grep "\"s3\": \"running\"" >/dev/null; do
            sleep 2
          done
          echo "✅ Localstack is ready"
      # 6. Seed Localstack (SSM params & S3 bucket)
      - name: Seed Localstack
        run: bash ./localstack.sh  
      # 5. Start FastAPI
      - name: Start FastAPI
        run: |
          echo "🚀 Starting FastAPI..."
          nohup uvicorn main:app --host 0.0.0.0 --port 8080 > fastapi.log 2>&1 &
          sleep 10
          tail -n 20 fastapi.log

      # 6. Install ngrok v3 via apt
      - name: Install ngrok v3
        run: |
          curl -sSL https://ngrok-agent.s3.amazonaws.com/ngrok.asc \
            | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com bookworm main" \
            | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update
          sudo apt install -y ngrok
          ngrok version

      # 7. Configure ngrok auth token
      - name: Configure ngrok
        run: ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

      # 8. Start ngrok tunnel
      - name: Start ngrok tunnel
        id: ngrok
        run: |
          ngrok http http://localhost:8080 --log=stdout > ngrok.log &
          sleep 15
          # Extract public URL
          NGROK_URL=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV
          echo "Tunnel URL: $NGROK_URL"
          tail -n 20 ngrok.log

      # 9. Comment PR with ngrok URL
      - name: Comment PR with preview URL
        if: env.NGROK_URL != ''
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: "🚀 PR Preview is live: ${{ env.NGROK_URL }}"
      - name: Keep tunnel alive
        run: |
              echo "🕒 Keeping tunnel alive for 10 minutes..."
              sleep 300
  pr-teardown:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Tear down Docker Compose
        run: |
          echo "🛑 PR closed. Shutting down Docker Compose..."
          docker compose down
